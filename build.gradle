plugins {
    id 'kotlin-multiplatform' version '1.3.11'
    id 'kotlinx-serialization' version '1.3.11'
    id "com.jfrog.bintray" version "1.8.4"
}
repositories {
    mavenCentral()
    jcenter()
    maven { url "https://kotlin.bintray.com/kotlinx" }
}
group 'company.evo'
version '0.0.1'

apply plugin: 'maven-publish'

kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm')
        fromPreset(presets.js, 'js')
        // For ARM, preset should be changed to presets.iosArm32 or presets.iosArm64
        // For Linux, preset should be changed to e.g. presets.linuxX64
        // For MacOS, preset should be changed to e.g. presets.macosX64
        fromPreset(presets.linuxX64, 'linux') {
            // Comment to generate Kotlin/Native library (KLIB) instead of executable file:
            compilations.main.outputKinds('EXECUTABLE')
            compilations.main.entryPoint = 'cli.main'
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common"

                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"

                implementation "io.ktor:ktor-client-core:$ktor_version"
                implementation "io.ktor:ktor-client-json:$ktor_version"
            }
        }
        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common"

                implementation "io.ktor:ktor-client-mock:$ktor_version"
            }
        }
        jvmMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

                implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
            }
        }
        jvmTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test"
                implementation "org.jetbrains.kotlin:kotlin-test-junit"

                implementation "io.ktor:ktor-client-mock-jvm:$ktor_version"
            }
        }
        jsMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-js"

                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
                implementation "io.ktor:ktor-client-json-js:$ktor_version"
            }
        }
        jsTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-js"

                implementation "io.ktor:ktor-client-mock-js:$ktor_version"
            }
        }
        linuxMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"

                implementation "io.ktor:ktor-client-json-native:$ktor_version"
            }
        }
        linuxTest {
            dependencies {
                implementation "io.ktor:ktor-client-mock-native:$ktor_version"
            }
        }
    }
}

task stubJavadoc(type: Jar) {
    classifier = 'javadoc'
}

task emptyJar(type: Jar) {
}

publishing {
    repositories {
        maven { url = "https://github.com/anti-social/kafka-connect-rest-client" }
        maven { name = "testLocal"; url = "$rootProject.buildDir/m2" }
    }
    publications.all {
        def type = it.name
        switch (type) {
            case "kotlinMultiplatform":
                task sourcesJar(type: Jar) {
                    classifier "sources"
                    from kotlin.sourceSets.commonMain.kotlin
                }

                it.artifactId = "$project.name-native"
                it.artifact emptyJar
                it.artifact stubJavadoc
                it.artifact sourcesJar
                break
            case "metadata":
                it.artifactId = "$project.name"
                break
            case "jvm":
            case "js":
            case "native":
                it.artifactId = "$project.name-$type"
                break
        }


        pom.withXml { pom ->
            def dependenciesNode = asNode().getAt("dependencies")[0]
            if (dependenciesNode == null) return
            dependenciesNode.dependency.each {
                it.artifactId.each { node ->
                    def artifactId = node.text()
                    if (!artifactId.startsWith("kafka-connect-rest-client") || !artifactId.endsWith("native")) return

                    switch (type) {
                        case "metadata":
                            node.setValue("${artifactId[0..-8]}")
                            break
                        case "jvm":
                        case "js":
                            node.setValue("${artifactId[0..-8]}-$type")
                            break
                    }
                }
            }
        }
    }


    kotlin.targets.all { target ->
        def publication = publishing.publications.findByName(target.name)

        if (publication != null) {
            publication.artifact stubJavadoc

            if (target.platformType.name != "native") {
                publication.gradleModuleMetadataFile = null
                tasks.matching { it.name == "generateMetadataFileFor${name.capitalize()}Publication" }.all {
                    onlyIf { false }
                }
            } else {
                publication.artifact emptyJar
            }
        }
    }
}

bintray {
    user = project.hasProperty("bintrayUser") ? project.property("bintrayUser") : System.getenv("BINTRAY_USER")
    key = project.hasProperty("bintrayApiKey") ? project.property("bintrayApiKey") : System.getenv("BINTRAY_API_KEY")
    publish = true
    override = true
    dryRun = project.hasProperty("bintrayDryRun")

    pkg {
        userOrg = "evo"
        repo = "maven"
        name = "kafka-connect-rest-client"
        licenses = ["Apache-2.0"]
        vcsUrl = "https://github.com/anti-social/kafka-connect-rest-client"

        version {
            name = project.version
            released = new Date()
            vcsTag = project.version
        }
    }
}

// This is required for K/N publishing
bintrayUpload.dependsOn publishToMavenLocal

// This is for easier debugging of bintray uploading problems
bintrayUpload.doFirst {
    publications = project.publishing.publications.findAll { !it.name.contains('-test') }.collect {
        println("Uploading artifact '$it.groupId:$it.artifactId:$it.version' from publication '$it.name'")
        // https://github.com/bintray/gradle-bintray-plugin/issues/256
        it.name
    }
}
